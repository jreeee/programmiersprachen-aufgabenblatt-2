#define CATCH_CONFIG_RUNNER
#include "catch.hpp"
#include "vec2.hpp"
#include "mat2.hpp"
#include "color.hpp"
#include "circle.hpp"
#include "rectangle.hpp"
#include "window.hpp"


//Vec2 tests
TEST_CASE("testing vec2", "[vec2]")
{
  Vec2 a = {};
  REQUIRE(a.x == Approx(0.0f));
  REQUIRE(a.y == Approx(0.0f));

  Vec2 b = {5.1f,-9.3f};
  REQUIRE(b.x == Approx(5.1f));
  REQUIRE(b.y == Approx(-9.3f));
}
TEST_CASE("testing basic operators +=, +, -= and -", "[vec2]")
{
  Vec2 a = {1.3f,-2.7f};
  Vec2 b = {3.5f,4.2f};
  Vec2 c = {};
  Vec2 d = {-5.7f,3.6f};
  Vec2 e = {-6.1f,-9.7f};
  Vec2 ta{a};
  Vec2 tb{b};
  Vec2 tc{c};
  Vec2 td{d};
  Vec2 te{e};

  //testing the += operator
  ta += b;
  REQUIRE(ta.x == Approx(4.8f));
  REQUIRE(ta.y == Approx(1.5f));
  ta = a;
  ta += c;
  REQUIRE(ta.x == Approx(1.3f));
  REQUIRE(ta.y == Approx(-2.7));
  ta = a;
  ta += d;
  REQUIRE(ta.x == Approx(-4.4f));
  REQUIRE(ta.y == Approx(0.9f));
  ta = a;
  ta += e;
  REQUIRE(ta.x == Approx(-4.8f));
  REQUIRE(ta.y == Approx(-12.4f));
  tb += c;
  REQUIRE(tb.x == Approx(3.5f));
  REQUIRE(tb.y == Approx(4.2f));
  tb = b;
  tb += d;
  REQUIRE(tb.x == Approx(-2.2f));
  REQUIRE(tb.y == Approx(7.8f));
  tb = b;
  tb += e;
  REQUIRE(tb.x == Approx(-2.6f));
  REQUIRE(tb.y == Approx(-5.5f));
  tc += d;
  REQUIRE(tc.x == Approx(-5.7f));
  REQUIRE(tc.y == Approx(3.6f));
  tc = c;
  tc += e;
  REQUIRE(tc.x == Approx(-6.1f));
  REQUIRE(tc.y == Approx(-9.7f));
  td += e;
  REQUIRE(td.x == Approx(-11.8f));
  REQUIRE(td.y == Approx(-6.1f));
  tb = b;
  tb += a;
  REQUIRE(tb.x == Approx(4.8f));
  REQUIRE(tb.y == Approx(1.5f));
  tc = c;
  tc += a;
  REQUIRE(tc.x == Approx(1.3f));
  REQUIRE(tc.y == Approx(-2.7));
  td = d;
  td += a;
  REQUIRE(td.x == Approx(-4.4f));
  REQUIRE(td.y == Approx(0.9f));
  te = e;
  te += a;
  REQUIRE(te.x == Approx(-4.8f));
  REQUIRE(te.y == Approx(-12.4f));
  tc = c;
  tc += b;
  REQUIRE(tc.x == Approx(3.5f));
  REQUIRE(tc.y == Approx(4.2f));
  td = d;
  td += b;
  REQUIRE(td.x == Approx(-2.2f));
  REQUIRE(td.y == Approx(7.8f));
  te = e;
  te += b;
  REQUIRE(te.x == Approx(-2.6f));
  REQUIRE(te.y == Approx(-5.5f));
  td = d;
  td += c;
  REQUIRE(td.x == Approx(-5.7f));
  REQUIRE(td.y == Approx(3.6f));
  te = e;
  te += c;
  REQUIRE(te.x == Approx(-6.1f));
  REQUIRE(te.y == Approx(-9.7f));
  te = e;
  te += d;
  REQUIRE(te.x == Approx(-11.8f));
  REQUIRE(te.y == Approx(-6.1f));

  //testing the + operator
  ta = a;
  Vec2 tmp = ta + b;
  REQUIRE(tmp.x == Approx(4.8f));
  REQUIRE(tmp.y == Approx(1.5f));
  ta = a;
  tmp = ta + c;
  REQUIRE(tmp.x == Approx(1.3f));
  REQUIRE(tmp.y == Approx(-2.7));
  ta = a;
  tmp = ta + d;
  REQUIRE(tmp.x == Approx(-4.4f));
  REQUIRE(tmp.y == Approx(0.9f));
  ta = a;
  tmp = ta + e;
  REQUIRE(tmp.x == Approx(-4.8f));
  REQUIRE(tmp.y == Approx(-12.4f));
  tb = b;
  tmp = tb + c;
  REQUIRE(tmp.x == Approx(3.5f));
  REQUIRE(tmp.y == Approx(4.2f));
  tb = b;
  tmp = tb + d;
  REQUIRE(tmp.x == Approx(-2.2f));
  REQUIRE(tmp.y == Approx(7.8f));
  tb = b;
  tmp = tb + e;
  REQUIRE(tmp.x == Approx(-2.6f));
  REQUIRE(tmp.y == Approx(-5.5f));
  tc = c;
  tmp = tc + d;
  REQUIRE(tmp.x == Approx(-5.7f));
  REQUIRE(tmp.y == Approx(3.6f));
  tc = c;
  tmp = tc + e;
  REQUIRE(tmp.x == Approx(-6.1f));
  REQUIRE(tmp.y == Approx(-9.7f));
  td = d;
  tmp = td + e;
  REQUIRE(tmp.x == Approx(-11.8f));
  REQUIRE(tmp.y == Approx(-6.1f));
  tb = b;
  tmp = tb + a;
  REQUIRE(tmp.x == Approx(4.8f));
  REQUIRE(tmp.y == Approx(1.5f));
  tc = c;
  tmp = tc + a;
  REQUIRE(tmp.x == Approx(1.3f));
  REQUIRE(tmp.y == Approx(-2.7));
  td = d;
  tmp = td + a;
  REQUIRE(tmp.x == Approx(-4.4f));
  REQUIRE(tmp.y == Approx(0.9f));
  te = e;
  tmp = te + a;
  REQUIRE(tmp.x == Approx(-4.8f));
  REQUIRE(tmp.y == Approx(-12.4f));
  tc = c;
  tmp = tc + b;
  REQUIRE(tmp.x == Approx(3.5f));
  REQUIRE(tmp.y == Approx(4.2f));
  td = d;
  tmp = td + b;
  REQUIRE(tmp.x == Approx(-2.2f));
  REQUIRE(tmp.y == Approx(7.8f));
  te = e;
  tmp = te + b;
  REQUIRE(tmp.x == Approx(-2.6f));
  REQUIRE(tmp.y == Approx(-5.5f));
  td = d;
  tmp = td + c;
  REQUIRE(tmp.x == Approx(-5.7f));
  REQUIRE(tmp.y == Approx(3.6f));
  te = e;
  tmp = te + c;
  REQUIRE(tmp.x == Approx(-6.1f));
  REQUIRE(tmp.y == Approx(-9.7f));
  te = e;
  tmp = te + d;
  REQUIRE(tmp.x == Approx(-11.8f));
  REQUIRE(tmp.y == Approx(-6.1f));

  //testing the -= operator
  ta = a;
  ta -= b;
  REQUIRE(ta.x == Approx(-2.2f));
  REQUIRE(ta.y == Approx(-6.9f));
  ta = a;
  ta -= c;
  REQUIRE(ta.x == Approx(1.3f));
  REQUIRE(ta.y == Approx(-2.7));
  ta = a;
  ta -= d;
  REQUIRE(ta.x == Approx(7.0f));
  REQUIRE(ta.y == Approx(-6.3f));
  ta = a;
  ta -= e;
  REQUIRE(ta.x == Approx(7.4f));
  REQUIRE(ta.y == Approx(7.0f));
  tb = b;
  tb -= c;
  REQUIRE(tb.x == Approx(3.5f));
  REQUIRE(tb.y == Approx(4.2f));
  tb = b;
  tb -= d;
  REQUIRE(tb.x == Approx(9.2f));
  REQUIRE(tb.y == Approx(0.6f));
  tb = b;
  tb -= e;
  REQUIRE(tb.x == Approx(9.6f));
  REQUIRE(tb.y == Approx(13.9f));
  tc = c;
  tc -= d;
  REQUIRE(tc.x == Approx(5.7f));
  REQUIRE(tc.y == Approx(-3.6f));
  tc = c;
  tc -= e;
  REQUIRE(tc.x == Approx(6.1f));
  REQUIRE(tc.y == Approx(9.7f));
  td = d;
  td -= e;
  REQUIRE(td.x == Approx(0.4f));
  REQUIRE(td.y == Approx(13.3f));
  tb = b;
  tb -= a;
  REQUIRE(tb.x == Approx(2.2f));
  REQUIRE(tb.y == Approx(6.9f));
  tc = c;
  tc -= a;
  REQUIRE(tc.x == Approx(-1.3f));
  REQUIRE(tc.y == Approx(2.7));
  td = d;
  td -= a;
  REQUIRE(td.x == Approx(-7.0f));
  REQUIRE(td.y == Approx(6.3f));
  te = e;
  te -= a;
  REQUIRE(te.x == Approx(-7.4f));
  REQUIRE(te.y == Approx(-7.0f));
  tc = c;
  tc -= b;
  REQUIRE(tc.x == Approx(-3.5f));
  REQUIRE(tc.y == Approx(-4.2f));
  td = d;
  td -= b;
  REQUIRE(td.x == Approx(-9.2f));
  REQUIRE(td.y == Approx(-0.6f));
  te = e;
  te -= b;
  REQUIRE(te.x == Approx(-9.6f));
  REQUIRE(te.y == Approx(-13.9f));
  td = d;
  td -= c;
  REQUIRE(td.x == Approx(-5.7f));
  REQUIRE(td.y == Approx(3.6f));
  te = e;
  te -= c;
  REQUIRE(te.x == Approx(-6.1f));
  REQUIRE(te.y == Approx(-9.7f));
  te = e;
  te -= d;
  REQUIRE(te.x == Approx(-0.4f));
  REQUIRE(te.y == Approx(-13.3f));

  //testing the - operator
  ta = a;
  tmp = ta - b;
  REQUIRE(tmp.x == Approx(-2.2f));
  REQUIRE(tmp.y == Approx(-6.9f));
  ta = a;
  tmp = ta - c;
  REQUIRE(tmp.x == Approx(1.3f));
  REQUIRE(tmp.y == Approx(-2.7));
  ta = a;
  tmp = ta - d;
  REQUIRE(tmp.x == Approx(7.0f));
  REQUIRE(tmp.y == Approx(-6.3f));
  ta = a;
  tmp = ta - e;
  REQUIRE(tmp.x == Approx(7.4f));
  REQUIRE(tmp.y == Approx(7.0f));
  tb = b;
  tmp = tb - c;
  REQUIRE(tmp.x == Approx(3.5f));
  REQUIRE(tmp.y == Approx(4.2f));
  tb = b;
  tmp = tb - d;
  REQUIRE(tmp.x == Approx(9.2f));
  REQUIRE(tmp.y == Approx(0.6f));
  tb = b;
  tmp = tb - e;
  REQUIRE(tmp.x == Approx(9.6f));
  REQUIRE(tmp.y == Approx(13.9f));
  tc = c;
  tmp = tc - d;
  REQUIRE(tmp.x == Approx(5.7f));
  REQUIRE(tmp.y == Approx(-3.6f));
  tc = c;
  tmp = tc - e;
  REQUIRE(tmp.x == Approx(6.1f));
  REQUIRE(tmp.y == Approx(9.7f));
  td = d;
  tmp = td - e;
  REQUIRE(tmp.x == Approx(0.4f));
  REQUIRE(tmp.y == Approx(13.3f));
  tb = b;
  tmp = tb - a;
  REQUIRE(tmp.x == Approx(2.2f));
  REQUIRE(tmp.y == Approx(6.9f));
  tc = c;
  tmp = tc - a;
  REQUIRE(tmp.x == Approx(-1.3f));
  REQUIRE(tmp.y == Approx(2.7));
  td = d;
  tmp = td - a;
  REQUIRE(tmp.x == Approx(-7.0f));
  REQUIRE(tmp.y == Approx(6.3f));
  te = e;
  tmp = te - a;
  REQUIRE(tmp.x == Approx(-7.4f));
  REQUIRE(tmp.y == Approx(-7.0f));
  tc = c;
  tmp = tc - b;
  REQUIRE(tmp.x == Approx(-3.5f));
  REQUIRE(tmp.y == Approx(-4.2f));
  td = d;
  tmp = td - b;
  REQUIRE(tmp.x == Approx(-9.2f));
  REQUIRE(tmp.y == Approx(-0.6f));
  te = e;
  tmp = te - b;
  REQUIRE(tmp.x == Approx(-9.6f));
  REQUIRE(tmp.y == Approx(-13.9f));
  td = d;
  tmp = td -= c;
  REQUIRE(tmp.x == Approx(-5.7f));
  REQUIRE(tmp.y == Approx(3.6f));
  te = e;
  tmp = te - c;
  REQUIRE(tmp.x == Approx(-6.1f));
  REQUIRE(tmp.y == Approx(-9.7f));
  te = e;
  tmp = te - d;
  REQUIRE(tmp.x == Approx(-0.4f));
  REQUIRE(tmp.y == Approx(-13.3f));
}

TEST_CASE("testing basic operators *=, *", "[vec2]")
{
  Vec2 a = {1.3f,-2.7f};
  Vec2 b = {3.5f,4.2f};
  Vec2 c = {};
  Vec2 d = {-5.7f,3.6f};
  Vec2 e = {-6.1f,-9.7f};
  Vec2 f = {1,1};
  Vec2 ta{a};
  Vec2 tb{b};
  Vec2 tc{c};
  Vec2 td{d};
  Vec2 te{e};
  Vec2 tf{f};
  const float w = -3.0f;
  const float x = 0.0f;
  const float y = 1.0f;
  const float z = 3.0f;

  //testing the *= operator
  ta *= w;
  REQUIRE(ta.x == Approx(-3.9f));
  REQUIRE(ta.y == Approx(8.1f));
  ta = a;
  ta *= x;
  REQUIRE(ta.x == Approx(0.0f));
  REQUIRE(ta.y == Approx(0.0f));
  ta = a;
  ta *= y;
  REQUIRE(ta.x == Approx(1.3f));
  REQUIRE(ta.y == Approx(-2.7f));
  ta = a;
  ta *= z;
  REQUIRE(ta.x == Approx(3.9f));
  REQUIRE(ta.y == Approx(-8.1f));

  tb *= w;
  REQUIRE(tb.x == Approx(-10.5f));
  REQUIRE(tb.y == Approx(-12.6f));
  tb = b;
  tb *= x;
  REQUIRE(tb.x == Approx(0.0f));
  REQUIRE(tb.y == Approx(0.0f));
  tb = b;
  tb *= y;
  REQUIRE(tb.x == Approx(3.5f));
  REQUIRE(tb.y == Approx(4.2f));
  tb = b;
  tb *= z;
  REQUIRE(tb.x == Approx(10.5f));
  REQUIRE(tb.y == Approx(12.6f));

  tc *= w;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));
  tc = c;
  tc *= x;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));
  tc = c;
  tc *= y;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));
  tc = c;
  tc *= z;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));

  td *= w;
  REQUIRE(td.x == Approx(17.1f));
  REQUIRE(td.y == Approx(-10.8f));
  td = d;
  td *= x;
  REQUIRE(td.x == Approx(0.0f));
  REQUIRE(td.y == Approx(0.0f));
  td = d;
  td *= y;
  REQUIRE(td.x == Approx(-5.7f));
  REQUIRE(td.y == Approx(3.6f));
  td = d;
  td *= z;
  REQUIRE(td.x == Approx(-17.1f));
  REQUIRE(td.y == Approx(10.8f));

  te *= w;
  REQUIRE(te.x == Approx(18.3f));
  REQUIRE(te.y == Approx(29.1f));
  te = e;
  te *= x;
  REQUIRE(te.x == Approx(0.0f));
  REQUIRE(te.y == Approx(0.0f));
  te = e;
  te *= y;
  REQUIRE(te.x == Approx(-6.1f));
  REQUIRE(te.y == Approx(-9.7f));
  te = e;
  te *= z;
  REQUIRE(te.x == Approx(-18.3f));
  REQUIRE(te.y == Approx(-29.1f));

  tf *= w;
  REQUIRE(tf.x == Approx(-3.0f));
  REQUIRE(tf.y == Approx(-3.0f));
  tf = f;
  tf *= x;
  REQUIRE(tf.x == Approx(0.0f));
  REQUIRE(tf.y == Approx(0.0f));
  tf = f;
  tf *= y;
  REQUIRE(tf.x == Approx(1.0f));
  REQUIRE(tf.y == Approx(1.0f));
  tf = f;
  tf *= z;
  REQUIRE(tf.x == Approx(3.0f));
  REQUIRE(tf.y == Approx(3.0f));

  //testing the * operator
  ta = a;
  Vec2 tmp = ta * w;
  REQUIRE(tmp.x == Approx(-3.9f));
  REQUIRE(tmp.y == Approx(8.1f));
  ta = a;
  tmp = ta * x;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  ta = a;
  tmp = ta * y;
  REQUIRE(tmp.x == Approx(1.3f));
  REQUIRE(tmp.y == Approx(-2.7f));
  ta = a;
  tmp = ta * z;
  REQUIRE(tmp.x == Approx(3.9f));
  REQUIRE(tmp.y == Approx(-8.1f));

  tb = b;
  tmp = tb * w;
  REQUIRE(tmp.x == Approx(-10.5f));
  REQUIRE(tmp.y == Approx(-12.6f));
  tb = b;
  tmp = tb * x;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tb = b;
  tmp = tb * y;
  REQUIRE(tmp.x == Approx(3.5f));
  REQUIRE(tmp.y == Approx(4.2f));
  tb = b;
  tmp = tb * z;
  REQUIRE(tmp.x == Approx(10.5f));
  REQUIRE(tmp.y == Approx(12.6f));

  tc = c;
  tmp = tc * w;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tc = c;
  tmp = tc * x;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tc = c;
  tmp = tc * y;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tc = c;
  tmp = tc * z;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));

  td = d;
  tmp = td * w;
  REQUIRE(tmp.x == Approx(17.1f));
  REQUIRE(tmp.y == Approx(-10.8f));
  td = d;
  tmp = td * x;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  td = d;
  tmp = td * y;
  REQUIRE(tmp.x == Approx(-5.7f));
  REQUIRE(tmp.y == Approx(3.6f));
  td = d;
  tmp = td * z;
  REQUIRE(tmp.x == Approx(-17.1f));
  REQUIRE(tmp.y == Approx(10.8f));

  te = e;
  tmp = te * w;
  REQUIRE(tmp.x == Approx(18.3f));
  REQUIRE(tmp.y == Approx(29.1f));
  te = e;
  tmp = te * x;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  te = e;
  tmp = te * y;
  REQUIRE(tmp.x == Approx(-6.1f));
  REQUIRE(tmp.y == Approx(-9.7f));
  te = e;
  tmp = te * z;
  REQUIRE(tmp.x == Approx(-18.3f));
  REQUIRE(tmp.y == Approx(-29.1f));

  tf = f;
  tmp = tf * w;
  REQUIRE(tmp.x == Approx(-3.0f));
  REQUIRE(tmp.y == Approx(-3.0f));
  tf = f;
  tmp = tf * x;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tf = f;
  tmp = tf * y;
  REQUIRE(tmp.x == Approx(1.0f));
  REQUIRE(tmp.y == Approx(1.0f));
  tf = f;
  tmp = tf * z;
  REQUIRE(tmp.x == Approx(3.0f));
  REQUIRE(tmp.y == Approx(3.0f));


  ta = a;
  tmp = w * ta;
  REQUIRE(tmp.x == Approx(-3.9f));
  REQUIRE(tmp.y == Approx(8.1f));
  ta = a;
  tmp = x * ta;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  ta = a;
  tmp = y * ta;
  REQUIRE(tmp.x == Approx(1.3f));
  REQUIRE(tmp.y == Approx(-2.7f));
  ta = a;
  tmp = z * ta;
  REQUIRE(tmp.x == Approx(3.9f));
  REQUIRE(tmp.y == Approx(-8.1f));

  tb = b;
  tmp = w * tb;
  REQUIRE(tmp.x == Approx(-10.5f));
  REQUIRE(tmp.y == Approx(-12.6f));
  tb = b;
  tmp = x * tb;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tb = b;
  tmp = y * tb;
  REQUIRE(tmp.x == Approx(3.5f));
  REQUIRE(tmp.y == Approx(4.2f));
  tb = b;
  tmp = z * tb;
  REQUIRE(tmp.x == Approx(10.5f));
  REQUIRE(tmp.y == Approx(12.6f));

  tc = c;
  tmp = w * tc;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tc = c;
  tmp = x * tc;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tc = c;
  tmp = y * tc;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tc = c;
  tmp = z * tc;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));

  td = d;
  tmp = w * td;
  REQUIRE(tmp.x == Approx(17.1f));
  REQUIRE(tmp.y == Approx(-10.8f));
  td = d;
  tmp = x * td;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  td = d;
  tmp = y * td;
  REQUIRE(tmp.x == Approx(-5.7f));
  REQUIRE(tmp.y == Approx(3.6f));
  td = d;
  tmp = z * td;
  REQUIRE(tmp.x == Approx(-17.1f));
  REQUIRE(tmp.y == Approx(10.8f));

  te = e;
  tmp = w * te;
  REQUIRE(tmp.x == Approx(18.3f));
  REQUIRE(tmp.y == Approx(29.1f));
  te = e;
  tmp = x * te;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  te = e;
  tmp = y * te;
  REQUIRE(tmp.x == Approx(-6.1f));
  REQUIRE(tmp.y == Approx(-9.7f));
  te = e;
  tmp = z * te;
  REQUIRE(tmp.x == Approx(-18.3f));
  REQUIRE(tmp.y == Approx(-29.1f));

  tf = f;
  tmp = w * tf;
  REQUIRE(tmp.x == Approx(-3.0f));
  REQUIRE(tmp.y == Approx(-3.0f));
  tf = f;
  tmp = x * tf;
  REQUIRE(tmp.x == Approx(0.0f));
  REQUIRE(tmp.y == Approx(0.0f));
  tf = f;
  tmp = y * tf;
  REQUIRE(tmp.x == Approx(1.0f));
  REQUIRE(tmp.y == Approx(1.0f));
  tf = f;
  tmp = z * tf;
  REQUIRE(tmp.x == Approx(3.0f));
  REQUIRE(tmp.y == Approx(3.0f));
}
TEST_CASE("testing basic operators /=, /", "[vec2]")
{
  Vec2 a = {1.3f,-2.7f};
  Vec2 b = {3.5f,4.2f};
  Vec2 c = {};
  Vec2 d = {-5.7f,3.6f};
  Vec2 e = {-6.1f,-9.7f};
  Vec2 f = {1,1};
  Vec2 ta{a};
  Vec2 tb{b};
  Vec2 tc{c};
  Vec2 td{d};
  Vec2 te{e};
  Vec2 tf{f};
  const float w = -3.0f;
  const float x = 0.0f;
  const float y = 1.0f;
  const float z = 3.0f;

  //testing the /= operator
  ta /= w;
  REQUIRE(ta.x == Approx(-0.433333f));
  REQUIRE(ta.y == Approx(0.9f));
  ta = a;
  ta /= x;
  REQUIRE(ta.x == Approx(a.x));
  REQUIRE(ta.y == Approx(a.y));
  ta = a;
  ta /= y;
  REQUIRE(ta.x == Approx(1.3f));
  REQUIRE(ta.y == Approx(-2.7f));
  ta = a;
  ta /= z;
  REQUIRE(ta.x == Approx(0.433333f));
  REQUIRE(ta.y == Approx(-0.9f));

  tb /= w;
  REQUIRE(tb.x == Approx(-1.166666f));
  REQUIRE(tb.y == Approx(-1.4f));
  tb = b;
  tb /= x;
  REQUIRE(tb.x == Approx(b.x));
  REQUIRE(tb.y == Approx(b.y));
  tb = b;
  tb /= y;
  REQUIRE(tb.x == Approx(3.5f));
  REQUIRE(tb.y == Approx(4.2f));
  tb = b;
  tb /= z;
  REQUIRE(tb.x == Approx(1.166666f));
  REQUIRE(tb.y == Approx(1.4f));

  tc /= w;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));
  tc = c;
  tc /= x;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));
  tc = c;
  tc /= y;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));
  tc = c;
  tc /= z;
  REQUIRE(tc.x == Approx(0.0f));
  REQUIRE(tc.y == Approx(0.0f));

  td /= w;
  REQUIRE(td.x == Approx(1.9f));
  REQUIRE(td.y == Approx(-1.2f));
  td = d;
  td /= x;
  REQUIRE(td.x == Approx(d.x));
  REQUIRE(td.y == Approx(d.y));
  td = d;
  td /= y;
  REQUIRE(td.x == Approx(-5.7f));
  REQUIRE(td.y == Approx(3.6f));
  td = d;
  td /= z;
  REQUIRE(td.x == Approx(-1.9f));
  REQUIRE(td.y == Approx(1.2f));

  te /= w;
  REQUIRE(te.x == Approx(2.033333f));
  REQUIRE(te.y == Approx(3.233333f));
  te = e;
  te /= x;
  REQUIRE(te.x == Approx(e.x));
  REQUIRE(te.y == Approx(e.y));
  te = e;
  te /= y;
  REQUIRE(te.x == Approx(-6.1f));
  REQUIRE(te.y == Approx(-9.7f));
  te = e;
  te /= z;
  REQUIRE(te.x == Approx(-2.033333f));
  REQUIRE(te.y == Approx(-3.233333f));

  tf /= w;
  REQUIRE(tf.x == Approx(-0.333333f));
  REQUIRE(tf.y == Approx(-0.333333f));
  tf = f;
  tf /= x;
  REQUIRE(tf.x == Approx(f.x));
  REQUIRE(tf.y == Approx(f.y));
  tf = f;
  tf /= y;
  REQUIRE(tf.x == Approx(1.0f));
  REQUIRE(tf.y == Approx(1.0f));
  tf = f;
  tf /= z;
  REQUIRE(tf.x == Approx(0.333333f));
  REQUIRE(tf.y == Approx(0.333333f));

  //testing the / operator
  ta = a;
  Vec2 tmp = ta / w;
  REQUIRE(tmp.x == Approx(-0.433333f));
  REQUIRE(tmp.y == Approx(0.9f));
  ta = a;
  tmp = ta / x;
  REQUIRE(tmp.x == Approx(ta.x));
  REQUIRE(tmp.y == Approx(ta.y));
  ta = a;
  tmp = ta / y;
  REQUIRE(tmp.x == Approx(1.3f));
  REQUIRE(tmp.y == Approx(-2.7f));
  ta = a;
  tmp = ta / z;
  REQUIRE(tmp.x == Approx(0.433333f));
  REQUIRE(tmp.y == Approx(-0.9f));

  tb = b;
  tmp = tb / w;
  REQUIRE(tmp.x == Approx(-1.166666f));
  REQUIRE(tmp.y == Approx(-1.4f));
  tb = b;
  tmp = tb / x;
  REQUIRE(tmp.x == Approx(b.x));
  REQUIRE(tmp.y == Approx(b.y));
  tb = b;
  tmp = tb / y;
  REQUIRE(tmp.x == Approx(3.5f));
  REQUIRE(tmp.y == Approx(4.2f));
  tb = b;
  tmp = tb / z;
  REQUIRE(tmp.x == Approx(1.166666f));
  REQUIRE(tmp.y == Approx(1.4f));

  tc = c;
  tmp = tc / w;
  REQUIRE(tmp.x == Approx(c.x));
  REQUIRE(tmp.y == Approx(c.y));
  tc = c;
  tmp = tc / x;
  REQUIRE(tmp.x == Approx(c.x));
  REQUIRE(tmp.y == Approx(c.y));
  tc = c;
  tmp = tc / y;
  REQUIRE(tmp.x == Approx(c.x));
  REQUIRE(tmp.y == Approx(c.y));
  tc = c;
  tmp = tc / z;
  REQUIRE(tmp.x == Approx(c.x));
  REQUIRE(tmp.y == Approx(c.y));

  td = d;
  tmp = td / w;
  REQUIRE(tmp.x == Approx(1.9f));
  REQUIRE(tmp.y == Approx(-1.2f));
  td = d;
  tmp = td / x;
  REQUIRE(tmp.x == Approx(d.x));
  REQUIRE(tmp.y == Approx(d.y));
  td = d;
  tmp = td / y;
  REQUIRE(tmp.x == Approx(-5.7f));
  REQUIRE(tmp.y == Approx(3.6f));
  td = d;
  tmp = td / z;
  REQUIRE(tmp.x == Approx(-1.9f));
  REQUIRE(tmp.y == Approx(1.2f));

  te = e;
  tmp = te / w;
  REQUIRE(tmp.x == Approx(2.033333f));
  REQUIRE(tmp.y == Approx(3.233333f));
  te = e;
  tmp = te / x;
  REQUIRE(tmp.x == Approx(e.x));
  REQUIRE(tmp.y == Approx(e.y));
  te = e;
  tmp = te / y;
  REQUIRE(tmp.x == Approx(-6.1f));
  REQUIRE(tmp.y == Approx(-9.7f));
  te = e;
  tmp = te / z;
  REQUIRE(tmp.x == Approx(-2.033333f));
  REQUIRE(tmp.y == Approx(-3.233333f));

  tf = f;
  tmp = tf / w;
  REQUIRE(tmp.x == Approx(-0.333333f));
  REQUIRE(tmp.y == Approx(-0.333333f));
  tf = f;
  tmp = tf / x;
  REQUIRE(tmp.x == Approx(f.x));
  REQUIRE(tmp.y == Approx(f.y));
  tf = f;
  tmp = tf / y;
  REQUIRE(tmp.x == Approx(1.0f));
  REQUIRE(tmp.y == Approx(1.0f));
  tf = f;
  tmp = tf / z;
  REQUIRE(tmp.x == Approx(0.333333f));
  REQUIRE(tmp.y == Approx(0.333333f));
}

//Mat2 tests
TEST_CASE("testing matrix multiplication", "[mat2]")
{
  const Mat2 a{};
  const Mat2 b{3.0f, 7.0f, 9.0f, 13.0f};
  const Mat2 c{-5.0f, -2.0f, -12.0f, -8.0f};
  const Mat2 d{0.0f, 2.0f, 3.0f, 8.0f};
  const Mat2 e{0.0f,0.0f,0.0f,0.0f};
  const Mat2 f{1.0f, 1.0f, 1.0f, 1.0f};

  //testing default matrix
  Mat2 tmp{a};
  REQUIRE(tmp.e_00 == Approx(1.0f));
  REQUIRE(tmp.e_10 == Approx(0.0f));
  REQUIRE(tmp.e_01 == Approx(0.0f));
  REQUIRE(tmp.e_11 == Approx(1.0f));
  //testing custom matrix
  tmp = b;
  REQUIRE(tmp.e_00 == Approx(3.0f));
  REQUIRE(tmp.e_10 == Approx(7.0f));
  REQUIRE(tmp.e_01 == Approx(9.0f));
  REQUIRE(tmp.e_11 == Approx(13.0f));

  //testing *= and *
  tmp = a;
  tmp *= b;
  REQUIRE(tmp.e_00 == Approx(3.0f));
  REQUIRE(tmp.e_10 == Approx(7.0f));
  REQUIRE(tmp.e_01 == Approx(9.0f));
  REQUIRE(tmp.e_11 == Approx(13.0f));
  tmp = a * b;
  REQUIRE(tmp.e_00 == Approx(3.0f));
  REQUIRE(tmp.e_10 == Approx(7.0f));
  REQUIRE(tmp.e_01 == Approx(9.0f));
  REQUIRE(tmp.e_11 == Approx(13.0f));
  tmp = b;
  tmp *= c;
  REQUIRE(tmp.e_00 == Approx(-99.0f));
  REQUIRE(tmp.e_10 == Approx(-62.0f));
  REQUIRE(tmp.e_01 == Approx(-201.0f));
  REQUIRE(tmp.e_11 == Approx(-122.0f));
  tmp = b * c;
  REQUIRE(tmp.e_00 == Approx(-99.0f));
  REQUIRE(tmp.e_10 == Approx(-62.0f));
  REQUIRE(tmp.e_01 == Approx(-201.0f));
  REQUIRE(tmp.e_11 == Approx(-122.0f));
  tmp = e;
  tmp *= b;
  REQUIRE(tmp.e_00 == Approx(0.0f));
  REQUIRE(tmp.e_10 == Approx(0.0f));
  REQUIRE(tmp.e_01 == Approx(0.0f));
  REQUIRE(tmp.e_11 == Approx(0.0f));
  tmp = e * b;
  REQUIRE(tmp.e_00 == Approx(0.0f));
  REQUIRE(tmp.e_10 == Approx(0.0f));
  REQUIRE(tmp.e_01 == Approx(0.0f));
  REQUIRE(tmp.e_11 == Approx(0.0f));
  tmp = d * f;
  REQUIRE(tmp.e_00 == Approx(2.0f));
  REQUIRE(tmp.e_10 == Approx(2.0f));
  REQUIRE(tmp.e_01 == Approx(11.0f));
  REQUIRE(tmp.e_11 == Approx(11.0f));
  tmp = d;
  tmp *= f;
  REQUIRE(tmp.e_00 == Approx(2.0f));
  REQUIRE(tmp.e_10 == Approx(2.0f));
  REQUIRE(tmp.e_01 == Approx(11.0f));
  REQUIRE(tmp.e_11 == Approx(11.0f));
}
TEST_CASE("testing the 2.6 operators", "[mat2]")
{
  const Mat2 m1{};
  const Mat2 m2{3.0f, 7.0f, 9.0f, 13.0f};
  const Mat2 m3{-5.0f, -2.0f, -12.0f, -8.0f};
  const Mat2 m4{0.0f, 2.0f, 3.0f, 8.0f};
  const Mat2 m5{0.0f,0.0f,0.0f,0.0f};
  const Mat2 m6{1.0f, 1.0f, 1.0f, 1.0f};

  const Vec2 v1{-2.0f, -5.0f};
  const Vec2 v2{-3.0f, 4.0f};
  const Vec2 v3{1.0f, 1.0f};
  const Vec2 v4{0.0f, 0.0f};
  const Vec2 v5{7.0f, 5.0f};

  //Mat2 * Vec2
  Vec2 tmpv = m1 * v1;
  REQUIRE(tmpv.x == Approx(-2.0f));
  REQUIRE(tmpv.y == Approx(-5.0f));
  tmpv = m5 * v5;
  REQUIRE(tmpv.x == Approx(0.0f));
  REQUIRE(tmpv.y == Approx(0.0f));
  tmpv = m6 * v3;
  REQUIRE(tmpv.x == Approx(2.0f));
  REQUIRE(tmpv.y == Approx(2.0f));
  tmpv = m3 * v1;
  REQUIRE(tmpv.x == Approx(34.0f));
  REQUIRE(tmpv.y == Approx(50.0f));
  tmpv = m2 * v2;
  REQUIRE(tmpv.x == Approx(-36.0f));
  REQUIRE(tmpv.y == Approx(80.0f));

  //determinants
  float det = m1.det();
  REQUIRE(det == Approx(1.0f));
  det = m2.det();
  REQUIRE(det == Approx(-24.0f));
  det = m3.det();
  REQUIRE(det == Approx(16.0f));
  det = m4.det();
  REQUIRE(det == Approx(-6.0f));
  det = m5.det();
  REQUIRE(det == Approx(0.0f));
  det = m6.det();
  REQUIRE(det == Approx(0.0f));
  
  //inverse
  Mat2 tmpm = inverse(m1);
  REQUIRE(tmpm.e_00 == Approx(1.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(1.0f));
  tmpm = inverse(m2);
  REQUIRE(tmpm.e_00 == Approx(-0.541666f));
  REQUIRE(tmpm.e_10 == Approx(0.291666f));
  REQUIRE(tmpm.e_01 == Approx(0.375f));
  REQUIRE(tmpm.e_11 == Approx(-0.125f));
  tmpm = inverse(m3);
  REQUIRE(tmpm.e_00 == Approx(-0.5f));
  REQUIRE(tmpm.e_10 == Approx(0.125f));
  REQUIRE(tmpm.e_01 == Approx(0.75f));
  REQUIRE(tmpm.e_11 == Approx(-0.3125f));
  tmpm = inverse(m4);
  REQUIRE(tmpm.e_00 == Approx(-1.333333f));
  REQUIRE(tmpm.e_10 == Approx(0.333333f));
  REQUIRE(tmpm.e_01 == Approx(0.5f));
  REQUIRE(tmpm.e_11 == Approx(0.0f));
  tmpm = inverse(m5);
  REQUIRE(tmpm.e_00 == Approx(0.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(0.0f));
  tmpm = inverse(m6);
  REQUIRE(tmpm.e_00 == Approx(1.0f));
  REQUIRE(tmpm.e_10 == Approx(1.0f));
  REQUIRE(tmpm.e_01 == Approx(1.0f));
  REQUIRE(tmpm.e_11 == Approx(1.0f));

  //transpose
  tmpm = transpose(m1);
  REQUIRE(tmpm.e_00 == Approx(1.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(1.0f));
  tmpm = transpose(m2);
  REQUIRE(tmpm.e_00 == Approx(3.0f));
  REQUIRE(tmpm.e_10 == Approx(9.0f));
  REQUIRE(tmpm.e_01 == Approx(7.0f));
  REQUIRE(tmpm.e_11 == Approx(13.0f));
  tmpm = transpose(m3);
  REQUIRE(tmpm.e_00 == Approx(-5.0f));
  REQUIRE(tmpm.e_10 == Approx(-12.0f));
  REQUIRE(tmpm.e_01 == Approx(-2.0f));
  REQUIRE(tmpm.e_11 == Approx(-8.0f));
  tmpm = transpose(m4);
  REQUIRE(tmpm.e_00 == Approx(0.0f));
  REQUIRE(tmpm.e_10 == Approx(3.0f));
  REQUIRE(tmpm.e_01 == Approx(2.0f));
  REQUIRE(tmpm.e_11 == Approx(8.0f));
  tmpm = transpose(m5);
  REQUIRE(tmpm.e_00 == Approx(0.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(0.0f));
  tmpm = transpose(m6);
  REQUIRE(tmpm.e_00 == Approx(1.0f));
  REQUIRE(tmpm.e_10 == Approx(1.0f));
  REQUIRE(tmpm.e_01 == Approx(1.0f));
  REQUIRE(tmpm.e_11 == Approx(1.0f));

  //rotation
  tmpm = make_rotation_mat2(0);
  REQUIRE(tmpm.e_00 == Approx(1.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(1.0f));
  tmpm = make_rotation_mat2(M_PI);
  REQUIRE(tmpm.e_00 == Approx(-1.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(-1.0f));
  tmpm = make_rotation_mat2(M_PI / 2);
  REQUIRE(tmpm.e_00 == Approx(0.0f));
  REQUIRE(tmpm.e_10 == Approx(-1.0f));
  REQUIRE(tmpm.e_01 == Approx(1.0f));
  REQUIRE(tmpm.e_11 == Approx(0.0f));
  tmpm = make_rotation_mat2(2 * M_PI);
  REQUIRE(tmpm.e_00 == Approx(1.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(1.0f));
  tmpm = make_rotation_mat2(-M_PI);
  REQUIRE(tmpm.e_00 == Approx(-1.0f));
  REQUIRE(tmpm.e_10 == Approx(0.0f));
  REQUIRE(tmpm.e_01 == Approx(0.0f));
  REQUIRE(tmpm.e_11 == Approx(-1.0f));
  tmpm = make_rotation_mat2(-M_PI / 2);
  REQUIRE(tmpm.e_00 == Approx(0.0f));
  REQUIRE(tmpm.e_10 == Approx(1.0f));
  REQUIRE(tmpm.e_01 == Approx(-1.0f));
  REQUIRE(tmpm.e_11 == Approx(0.0f));
}

//Color tests
TEST_CASE("testing the color struct", "[color]") 
{
  Color def{};
  REQUIRE(def.red == Approx(0.5f));
  REQUIRE(def.green == Approx(0.5f));
  REQUIRE(def.blue == Approx(0.5f));
  def = {0.0f, 0.0f, 1.0f};
  REQUIRE(def.red == Approx(0.0f));
  REQUIRE(def.green == Approx(0.0f));
  REQUIRE(def.blue == Approx(1.0f));
  def = {1.0f, 1.0f, 1.0f};
  REQUIRE(def.red == Approx(1.0f));
  REQUIRE(def.green == Approx(1.0f));
  REQUIRE(def.blue == Approx(1.0f));
  def = {0.0f, 0.0f, 0.0f};
  REQUIRE(def.red == Approx(0.0f));
  REQUIRE(def.green == Approx(0.0f));
  REQUIRE(def.blue == Approx(0.0f));
}

//circumference test 
TEST_CASE("testing the circumference of circles", "[circle]")
{
  Circle c1{2.0f, {}};
  float test = c1.circumference();
  REQUIRE(test == Approx(M_PI*4));
  Circle c2{0.0f, {23.4f, 67.1f}};
  test = c2.circumference();
  REQUIRE(test == Approx(0.0f));
  c2 = {};
  test = c2.circumference();
  REQUIRE(test == Approx(M_PI*100));
  c2 = {-1.0f, {}};
  test = c2.circumference();
  REQUIRE(test == Approx(M_PI *2));
}
TEST_CASE("testing the circumference of rectangle", "[rectangle]")
{
  Rectangle r1{};
  float test = r1.circumference();
  REQUIRE(test == Approx(200.0f));
  r1 = {{}, {30.0f, 20.0f}};
  test = r1.circumference();
  REQUIRE(test == Approx(100.0f));
  r1 = {{20.0f, 20.0f}, {}};
  test = r1.circumference();
  REQUIRE(test == Approx(80.0f));
  r1 = {{-10.0f, -20.0f}, {-5.0f, 0.0f}};
  test = r1.circumference();
  REQUIRE(test == Approx(50.0f));
  r1 = {{-5.0f, 0.0f}, {-10.0f, -20.0f}};
  test = r1.circumference();
  REQUIRE(test == Approx(50.0f));
  r1 = {{50.0f, 50.0f}, {0.0f, 0.0f}};
  test = r1.circumference();
  REQUIRE(test == Approx(200.0f));
}

int main(int argc, char *argv[])
{
  return Catch::Session().run(argc, argv);
}
